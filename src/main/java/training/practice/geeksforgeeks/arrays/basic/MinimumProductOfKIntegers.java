package training.practice.geeksforgeeks.arrays.basic;

import java.util.Arrays;
import java.util.PriorityQueue;

/*Given an array arr of  positive integers. You need to write a program to return the minimum product of k integers
of the given array.
Note: Since output could be large, hence module 109 +7 and then return the answer.*/
public class MinimumProductOfKIntegers {

	//approach 1
	//tc -> O(nlogn) and sc -> O(1)
	public static int getMinimumProduct(int[] arr, int k) {
		int modValue = 1000000007;
		Arrays.sort(arr);
		if(k>arr.length){
			k = arr.length;
		}
		long product = 1;
		for (int i = 0; i < k; i++) {
			product = (product * arr[i]) % (modValue);
		}
		return (int)product;

	}

	//approach 2
	//tc -> O(n) and sc - > O(1)
	public static int getMinimumProduct_2(int[] arr, int k) {
		int modValue = 1000000007;
		if(k>arr.length){
			k = arr.length;
		}
		PriorityQueue<Integer> p = new PriorityQueue<>();
		for (int i = 0; i < arr.length; i++) {
			p.add(arr[i]);
		}
		long product = 1;
		for (int i = 0; i < k; i++) {
			product = (product * p.remove()) % (modValue);
		}
		return (int)product;
	}

	public static void main(String[] args) {
		int[] arr = {618,903,169,834,791,825,447,517,843,605,846,543,629,382,508,885,301,203,776,873,715,196,803,903,160,352,923,772,222,440,844,981,101,447,854,834,954,107,360,905,781,110,923,256,423,270,424,521,618,428,304,316,453,836,806,618,851,825,499,889,348,524,379,755,276,580,220,836,505,250,291,365,577,755,737,664,400,998,523,133,628,628,750,681,343,702,342,951,523,465,159,229,403,975,350,304,710,216,616,281,161,655,505,318,459,854,269,676,887,862,829,532,493,731,711,520,546,435,750,480,497,136,568,672,325,449,886,560,691,530,824,433,192,260,809,100,706,883,442,879,771,493,674,204,666,696,295,967,542,968,399,196,580,264,866,281,743,981,521,268,603,598,238,400,661,100,647,559,320,551,414,511,290,483,497,383,322,850,978,570,738,403,710,475,535,169,233,368,845,488,363,922,881,527,758,968,946,510,570,458,727,262,620,820,380,487,940,691,492,509,245,222,860,739,130,268,985,107,924,888,940,600,259,128,920,219,386,340,123,885,434,644,276,787,630,708,625,598,957,321,265,731,790,841,329,807,492,848,137,131,160,115,791,869,831,943,501,512,531,201,756,822,539,539,639,893,390,283,402,633,467,124,586,664,605,945,917,967,894,925,662,424,845,704,290,144,202,969,498,904,179,554,460,447,819,420,409,280,688,247,445,610,304,760,554,392,330,310,822,309,309,301,682,869,849,356,110,181,542,793,938,593,154,709,148,185,516,274,841,248,412,704,709,179,702,468,457,695,740,724,829,827,948,290,172,911,880,586,958,658,721,481,238,140,518,997,716,327,548,374,537,187,194,645,370,421,871,475,779,349,185,491,283,208,632,216,203,927,928,895,150,455,286,714,141,710,137,158,384,556,235,801,998,328,707,410,436,579,556,251,252,868,988,257,547,371,182,823,334,195,878,992,770,648,888,651,212,323,858,985,197,427,573,922,740,128,957,551,993,666,183,450,270,621,442,124,880,733,202,766,412,819,896,706,288,281,447,305,636,638,727,650,756,689,396,817,609,408,796,835,355,751,242,539,380,715,950,405,758,577,693,883,240,105,615,409,327,592,601,401,655,408,296,472,981,155,211,513,601,788,780,580,230,677,670,363,420,253,217,392,348,383,297,726,481,321,850,495,972,788,251,141,371,318,394,988,154,640,162,655,573,354,604,545,409,345,472,523,421,836,726,395,273,594,900,560,284,170,176,432,726,467,640,484,170,753,657,812,477,884,175,700,436,787,904,945,807,758,329,293,228,828,831,935,854,953,892,837,319,280,721,705,917,565,748,629,733,759,288,809,575,398,806,720,957,104,554,736,230,746,891,936,450,430,488,519,918,500,198,916,218,417,477,780,528,180,333,156,227,314,803,823,193,219,921,833,159,480,935,460,878,242,453,821,185,966,500,565,464,943,324,442,899,142,275,239,567,410,259,301,477,999,916,814,907,352,256,775,857,995,667,874,663,372,647,638,949,428,903,239,605,679,611,240,770,376,226,678,263,278,458,974,563,586,424,956,574,765,792,994,419,954,879,477,562,664,842,225,854,779,211,960,113,914,606,852,661,181,911,206,204,146,405,799,754,815,157,639,777,157,780,655,673,263,701,923,440,844,616,363,193,599,674,752,919,209,963,494,460,310,577,747,530,669,916,820,279,856,752,931,426,460,243,534,467,761,675,710,619,694,654,886,593,783,315,696,239,598,978,605,911,414,690,977,841,901};
		int k = 971;
		System.out.println(getMinimumProduct_2(arr, k));
		/*String s = "";
		System.out.println(s.replace(" ",","));*/

	}
}
